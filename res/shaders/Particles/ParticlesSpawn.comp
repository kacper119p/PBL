#version 460 core

#include "Random.glsl"

struct particle {
    vec3 position;
    vec3 velocity;
    vec3 scale;
    vec3 accel;
    vec4 color;
    float life;
};

struct emitterSettings {
    vec4 MinColor;
    vec4 MaxColor;
    vec3 MinOffset;
    vec3 MaxOffset;
    vec3 MinVelocity;
    vec3 MaxVelocity;
    vec3 MinScale;
    vec3 MaxScale;
    vec3 MinAccel;
    vec3 MaxAccel;
    float MinLife;
    float MaxLife;
};

layout (std430, binding = 0) writeonly restrict buffer SSBO_0 {
    particle particles[];
};

layout (std430, binding = 1) coherent restrict buffer SSBO_1 {
    int count;
    int indices[];
} freelist;

uniform int ParticlesToSpawn;
uniform emitterSettings EmitterSettings;
uniform uint Random;

// make a particle with random attributes
void MakeParticle(out particle Particle) {
    uint seed = uint(gl_GlobalInvocationID.x) + Random;
    seed = pcg_hash(seed);
    Particle.life = rng(EmitterSettings.MinLife, EmitterSettings.MaxLife, seed);
    Particle.velocity.xyz = rng(EmitterSettings.MinVelocity.xyz, EmitterSettings.MaxVelocity.xyz, seed);
    Particle.scale.xyz = rng(EmitterSettings.MinScale.xyz, EmitterSettings.MaxScale.xyz, seed);
    Particle.accel.xyz = rng(EmitterSettings.MinAccel.xyz, EmitterSettings.MaxAccel.xyz, seed);
    Particle.color.rgba = rng(EmitterSettings.MinColor.rgba, EmitterSettings.MaxColor.rgba, seed);
    Particle.position = rng(EmitterSettings.MinOffset.xyz, EmitterSettings.MaxOffset.xyz, seed);
}

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= ParticlesToSpawn)
    return;

    int freeListIndex = atomicAdd(freelist.count, -1) - 1;
    if (freeListIndex < 0) {
        atomicAdd(freelist.count, 1);
        return;
    }

    int particleIndex = freelist.indices[freeListIndex];
    MakeParticle(particles[particleIndex]);
}